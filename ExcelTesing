package com.example.demo.service;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ActiveProfiles("test")
@ExtendWith(MockitoExtension.class)
public class ExcelServiceTest {

    @InjectMocks
    private ExcelService excelService;
    
    private File tempFile;
    
    @BeforeEach
    public void setup() {
        // Any setup code needed before each test
    }
    
    @AfterEach
    public void cleanup() throws IOException {
        // Cleanup any temporary files
        if (tempFile != null && tempFile.exists()) {
            tempFile.delete();
        }
    }
    
    @Test
    public void testGenerateExcel() throws IOException {
        // Prepare test data
        List<Object[]> data = new ArrayList<>();
        data.add(new Object[]{"John", "Doe", 30, "john.doe@example.com"});
        data.add(new Object[]{"Jane", "Smith", 25, "jane.smith@example.com"});
        data.add(new Object[]{"Bob", "Johnson", 45, "bob.johnson@example.com"});
        
        String[] headers = {"First Name", "Last Name", "Age", "Email"};
        
        // Call the service method
        byte[] excelContent = excelService.generateExcel(data, headers);
        
        // Verify the result
        assertNotNull(excelContent);
        assertTrue(excelContent.length > 0);
        
        // Parse the Excel content to verify its structure
        try (ByteArrayInputStream bis = new ByteArrayInputStream(excelContent);
             Workbook workbook = new XSSFWorkbook(bis)) {
            
            // Verify workbook has exactly one sheet
            assertEquals(1, workbook.getNumberOfSheets());
            
            // Get the sheet
            Sheet sheet = workbook.getSheetAt(0);
            assertNotNull(sheet);
            assertEquals("Data", sheet.getSheetName());
            
            // Verify row count (header + data rows)
            assertEquals(data.size() + 1, sheet.getPhysicalNumberOfRows());
            
            // Verify header row
            Row headerRow = sheet.getRow(0);
            assertNotNull(headerRow);
            
            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.getCell(i);
                assertNotNull(cell);
                assertEquals(headers[i], cell.getStringCellValue());
            }
            
            // Verify data rows
            for (int rowIdx = 0; rowIdx < data.size(); rowIdx++) {
                Row dataRow = sheet.getRow(rowIdx + 1); // +1 to skip header
                assertNotNull(dataRow);
                
                Object[] expectedRowData = data.get(rowIdx);
                
                // Check each cell in the row
                for (int colIdx = 0; colIdx < expectedRowData.length; colIdx++) {
                    Cell cell = dataRow.getCell(colIdx);
                    assertNotNull(cell);
                    
                    Object expectedValue = expectedRowData[colIdx];
                    if (expectedValue instanceof String) {
                        assertEquals(expectedValue, cell.getStringCellValue());
                    } else if (expectedValue instanceof Integer) {
                        assertEquals(((Integer) expectedValue).doubleValue(), cell.getNumericCellValue(), 0.001);
                    } else if (expectedValue instanceof Double) {
                        assertEquals(((Double) expectedValue), cell.getNumericCellValue(), 0.001);
                    }
                    // Add more type checks as needed
                }
            }
            
            // Optionally save the file for manual inspection
            tempFile = File.createTempFile("test-excel-service-", ".xlsx");
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                workbook.write(fos);
            }
            System.out.println("Excel saved for inspection at: " + tempFile.getAbsolutePath());
        }
    }
    
    @Test
    public void testGenerateExcelWithEmptyData() throws IOException {
        // Test with empty data but valid headers
        List<Object[]> emptyData = new ArrayList<>();
        String[] headers = {"Header1", "Header2"};
        
        byte[] excelContent = excelService.generateExcel(emptyData, headers);
        
        assertNotNull(excelContent);
        assertTrue(excelContent.length > 0);
        
        try (ByteArrayInputStream bis = new ByteArrayInputStream(excelContent);
             Workbook workbook = new XSSFWorkbook(bis)) {
            
            Sheet sheet = workbook.getSheetAt(0);
            assertEquals(1, sheet.getPhysicalNumberOfRows()); // Only header row
            
            Row headerRow = sheet.getRow(0);
            assertEquals(headers.length, headerRow.getPhysicalNumberOfCells());
        }
    }
    
    @Test
    public void testGenerateExcelWithDifferentDataTypes() throws IOException {
        // Test with various data types
        List<Object[]> data = new ArrayList<>();
        data.add(new Object[]{"Text", 123, 45.67, true, null});
        
        String[] headers = {"String", "Integer", "Double", "Boolean", "Null"};
        
        byte[] excelContent = excelService.generateExcel(data, headers);
        
        try (ByteArrayInputStream bis = new ByteArrayInputStream(excelContent);
             Workbook workbook = new XSSFWorkbook(bis)) {
            
            Sheet sheet = workbook.getSheetAt(0);
            Row dataRow = sheet.getRow(1); // First data row
            
            assertEquals("Text", dataRow.getCell(0).getStringCellValue());
            assertEquals(123, (int)dataRow.getCell(1).getNumericCellValue());
            assertEquals(45.67, dataRow.getCell(2).getNumericCellValue(), 0.001);
            assertTrue(dataRow.getCell(3).getBooleanCellValue());
            assertNull(dataRow.getCell(4)); // Null values don't create cells
        }
    }
